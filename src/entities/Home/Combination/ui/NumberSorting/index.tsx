import { memo, useCallback, useState } from "react";

import { useAuthStore } from "@/store/authStore";
import { getNumberTier } from "../NumberList/const";
import Menu from "@/shared/ui/Menu";
import styles from "./NumberSorting.module.scss";

interface GroupedNumbers {
  partner_price?: number;
  price?: number;
  credit_month_count?: number;
  part_price?: number;
  phones: string[];
}

const groupNumbers = (
  numbers: any[],
  isPartner: boolean
): Record<string, GroupedNumbers> => {
  return numbers.reduce<Record<string, GroupedNumbers>>((acc, item) => {
    const partnerPrice = String(item.partner_price);
    const userPrice = `${item.price}_${item.credit_month_count}`;

    const key = isPartner ? partnerPrice : userPrice;

    if (!acc[key]) {
      const partnerNumber = { partner_price: item.partner_price, phones: [] };
      const userNumber = {
        price: item.price,
        credit_month_count: item.credit_month_count,
        part_price: Math.round(item.part_price),
        phones: [],
      };

      acc[key] = isPartner ? partnerNumber : userNumber;
    }

    acc[key].phones.push(`${item.phone} ${item.operator}`);

    return acc;
  }, {});
};

const formatNumbersText = (
  grouped: Record<string, GroupedNumbers>,
  isPartner: boolean
): string => {
  return Object.values(grouped)
    .map((group) => {
      if (isPartner) {
        const priceFormatted =
          group.partner_price?.toLocaleString("ru-RU") || "";

        return `–¶–µ–Ω–∞ –ø–∞—Ä—Ç–Ω—ë—Ä–∞ ${priceFormatted} ‚ÇΩ\n${group.phones.join("\n")}`;
      } else {
        const priceFormatted = group.price?.toLocaleString("ru-RU") || "";
        const partPriceFormatted =
          group.part_price?.toLocaleString("ru-RU") || "";
        const formatedText = `–¶–µ–Ω–∞ ${priceFormatted} ‚ÇΩ\n–í —Ä–∞—Å—Å—Ä–æ—á–∫—É ${partPriceFormatted}‚ÇΩ x ${
          group.credit_month_count
        } –º–µ—Å\n${group.phones.join("\n")}`;

        return formatedText;
      }
    })
    .join("\n\n");
};

interface NumberSortProps {
  sortBy: string;
  order: "asc" | "desc" | "none";
  onSortChange: (sortBy: string, order: "asc" | "desc" | "none") => void;
  onReset: () => void;
  numbers?: any[];
  operator: string;
  setOperator: (value: string) => void;
  birthNumber: string;
  setBirthNumber: (value: string) => void;
  selectedTier: string;
  region?: string;
  setRegion?: (value: string) => void;
}

const NumberSort = (props: NumberSortProps) => {
  const {
    onReset,
    numbers = [],
    operator,
    setOperator,
    birthNumber,
    setBirthNumber,
    selectedTier,
  } = props;

  const { user } = useAuthStore();
  const isPartner = user?.role?.name === "–ü–∞—Ä—Ç–Ω—ë—Ä";
  const [filtersVisible, setFiltersVisible] = useState(false);

  const filteredNumbers =
    selectedTier && selectedTier !== "all"
      ? numbers.filter((n) => getNumberTier(n.price || 0) === selectedTier)
      : numbers;

  const handleCopyNumbers = useCallback(async () => {
    const grouped = groupNumbers(filteredNumbers, isPartner);
    const numbersText = formatNumbersText(grouped, isPartner);

    try {
      await navigator.clipboard.writeText(numbersText);
    } catch (error) {
      console.log(error);
    }
  }, [filteredNumbers, isPartner]);

  return (
    <div className={styles.sorting}>
      <div className={styles.sortMenuContainer}>
        <button
          className={styles.sortMenuButton}
          onClick={() => setFiltersVisible(!filtersVisible)}
          aria-label="–û—Ç–∫—Ä—ã—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã"
        >
          –í—Å–µ —Ñ–∏–ª—å—Ç—Ä—ã
        </button>

        <button
          className={styles.sortMenuButton}
          onClick={onReset}
          aria-label="–°–±—Ä–æ—Å–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä"
        >
          –°–±—Ä–æ—Å–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä
        </button>

        <button
          className={styles.copyButton}
          onClick={handleCopyNumbers}
          aria-label="–°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–º–µ—Ä–∞"
        >
          üìã
        </button>
      </div>

      <div className={filtersVisible ? styles.filters : styles.filtersHidden}>
        <div className={styles.selectFilters}>
          <Menu
            value={operator}
            onChange={(opt) => setOperator(opt.value!)}
            options={[
              { label: "–í—Å–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã", value: "–í—Å–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã" },
              {
                value: "–ú–¢–°",
                label: "–ú–¢–°",
                icon: "/assets/home/operators/mts.svg",
              },
              {
                value: "–ë–∏–ª–∞–π–Ω",
                label: "–ë–∏–ª–∞–π–Ω",
                icon: "/assets/home/operators/beeline.svg",
              },

              {
                value: "–ú–µ–≥–∞—Ñ–æ–Ω",
                label: "–ú–µ–≥–∞—Ñ–æ–Ω",
                icon: "/assets/home/operators/megafon.svg",
              },
              {
                value: "–¢–µ–ª–µ 2",
                label: "–¢–µ–ª–µ 2",
                icon: "/assets/home/promotion/tele2.svg",
              },
            ]}
          />

          <Menu
            value={birthNumber}
            onChange={(opt) => setBirthNumber(opt.value!)}
            options={[
              { value: "–ì–æ–¥ —Ä–æ–∂–¥–µ–Ω–∏—è", label: "–ì–æ–¥ —Ä–æ–∂–¥–µ–Ω–∏—è" },
              { value: "1960-–µ", label: "1960-–µ" },
              { value: "1970-–µ", label: "1970-–µ" },
              { value: "1980-–µ", label: "1980-–µ" },
              { value: "1990-–µ", label: "1990-–µ" },
              { value: "2000-–µ", label: "2000-–µ" },
              { value: "2010-–µ", label: "2010-–µ" },
            ]}
          />
        </div>
      </div>
    </div>
  );
};

export default memo(NumberSort);
